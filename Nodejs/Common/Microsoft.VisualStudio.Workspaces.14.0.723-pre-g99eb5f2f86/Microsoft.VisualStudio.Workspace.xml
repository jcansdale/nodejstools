<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.VisualStudio.Workspace</name>
    </assembly>
    <members>
        <member name="T:Microsoft.VisualStudio.Workspace.PathHelper">
            <summary>
            A collection of file system path analysis and manipulation functions.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.PathHelper.MakeRooted(System.String,System.String)">
            <summary>
            Generates an absolute path from a base path and another path.
            </summary>
            <param name="basePath">
            An absolute path to use as the root if <paramref name="path"/> is relative.
            IMPORTANT: if basePath is a directory, it must end with a directory separator character or else
            it will be treated like a filename and discarded.
            </param>
            <param name="path">A relative or absolute path, that needs to be absolute.</param>
            <exception cref="T:System.ArgumentException">Thrown when the <paramref name="basePath"/> argument is not an absolute path.</exception>
            <returns>
            A normalized, absolute path.  A path with relative parents (i.e. c:\temp\tmp\..\a.txt) will never be returned.
            Not necessarily canonical, in that the file casing of the path is not guaranteed to be consistent.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.PathHelper.MakeRelative(System.String,System.String)">
            <summary>
            given the absolute location of a file, and a disc location, returns relative file path to that disk location.
            </summary>
            <param name="basePath">
            The base path we want to relativize to. Must be absolute.
            Should <i>not</i> include a filename as the last segment will be interpreted as a directory.
            </param>
            <param name="path">
            The path we need to make relative to basePath.  The path can be either absolute path or a relative path in which case it is relative to the base path
            </param>
            <returns>
            The relative path (can be the full path when no relationship exists).
            If <paramref name="basePath"/> and <paramref name="path"/> are equivalent, the empty string is returned.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.PathHelper.EnsureNoTrailingSlash(System.String)">
            <summary>
            Make sure there is no [unnececery] trailing directory separator.
            </summary>
            <param name="path">directory path</param>
            <returns>directory path without trailing slash</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.PathHelper.EnsureTrailingSlash(System.String)">
            <summary>
            Make sure there is a trailing directory separator.
            </summary>
            <param name="path">directory path</param>
            <returns>directory path with trailing slash</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.PathHelper.IsInDirectoryCone(System.String,System.String)">
            <summary>
            Detects whether a given file falls within a given directory.
            </summary>
            <param name="directory">The absolute, normalized path to the directory.</param>
            <param name="file">The absolute, normalized path to the file.</param>
            <returns><c>true</c> if the given file falls within the given directory.</returns>
            <remarks>
            The current implementation of this method does NOT normalize the paths before the check.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.PathHelper.IsRooted(System.String)">
            <summary>
            Tests a path to see if it is absolute or not.  More reliable that Path.IsPathRooted.
            </summary>
            <param name="path">The path to check.</param>
            <returns><c>true</c> if the path is rooted; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.PathHelper.GetCorrectCapitalization(System.IO.DirectoryInfo)">
            <summary>
            Gets the correctly cased path for a given directory.
            </summary>
            <param name="di">Directory to find the correct casing for.</param>
            <returns>New directory with correctly cased path.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.PathHelper.PathNeedsNormalization(System.String)">
            <summary>
            A few fast checks that determine whether normalization of a path is warranted.
            </summary>
            <param name="path">A non-empty path.</param>
            <returns><c>true</c> if normalization is likely needed; <c>false</c> if normalization doesn't appear to be needed.</returns>
            <remarks>
            In the interest of executing very fast (since this method is used in fast-or-slow-path checks)
            this method by no means is comprehensive, but it should catch the common causes for needing normalization.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.PathHelper.CreateUriFromPath(System.String)">
            <summary>
            Helper function to create Uri object form path.
            </summary>
            <param name="path">path string</param>
            <returns>uri object</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.PathHelper.CleanupLocalFilePath(System.String)">
            <summary>
            Fixes common problems with local paths like double-backslash.
            </summary>
            <param name="path">The path to fix up.</param>
            <returns>The cleaned up path.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.AsyncEvent`1">
            <summary>
            Async Event class to support firing async EventHandlers
            </summary>
            <typeparam name="TEventArgs">The EventArgs type to support</typeparam>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.AsyncEvent`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Workspace.AsyncEvent`1"/> class.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.AsyncEvent`1.AsyncInvocations">
            <summary>
            Return the async invocation list
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.AsyncEvent`1.op_Addition(Microsoft.VisualStudio.Workspace.AsyncEvent{`0},System.Func{System.Object,`0,System.Threading.Tasks.Task})">
            <summary>
            Operator += to support standard mechanism of event subscription
            </summary>
            <param name="e">The async event class</param>
            <param name="callback">Async event callback to add</param>
            <returns>The existing or created Async event class</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.AsyncEvent`1.op_Subtraction(Microsoft.VisualStudio.Workspace.AsyncEvent{`0},System.Func{System.Object,`0,System.Threading.Tasks.Task})">
            <summary>
            Operator -= to support standard mechanism of event subscription
            </summary>
            <param name="e">The async event class</param>
            <param name="callback">Async event callback to remove</param>
            <returns>The Async event</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.AsyncEvent`1.InsertCallback(Microsoft.VisualStudio.Workspace.AsyncEvent{`0},System.Int32,System.Func{System.Object,`0,System.Threading.Tasks.Task})">
            <summary>
            Insert a callback in a pos
            </summary>
            <param name="e">The async event class</param>
            <param name="index">Position where to insert the callback</param>
            <param name="callback">Async event callback</param>
            <returns>The Async event</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.AsyncEvent`1.InvokeAsync(System.Object,`0)">
            <summary>
            Invoke async to await for each
            </summary>
            <param name="sender">sender object</param>
            <param name="eventArgs">Event Argument instance</param>
            <returns>The task to await to wait for all notifications to complete</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.AsyncEvent`1.OnInvocationListChanged(System.Boolean)">
            <summary>
            Invoked when changes to the Invocation List are added or removed
            </summary>
            <param name="isAdding">If a new item was added otherwise remove</param>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.BatchFileSystemEventArgs">
            <summary>
            Class BatchFileSystemEventArgs
            Allow a notification of multiple FileSystemEventArgs entities
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.BatchFileSystemEventArgs.#ctor(System.Collections.Generic.IEnumerable{System.IO.FileSystemEventArgs})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Workspace.BatchFileSystemEventArgs"/> class.
            </summary>
            <param name="fileSystemEvents">All file systems events</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.BatchFileSystemEventArgs.FileSystemEvents">
            <summary>
            All file system events
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.BuildConfigurationChangedEventArgs">
            <summary>
            Build configuration changed event args
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.BuildConfigurationChangedEventArgs.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Workspace.BuildConfigurationChangedEventArgs"/> class.
            </summary>
            <param name="projectFile">The project file relative path</param>
            <param name="buildConfiguration">The new build configuration</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.BuildConfigurationChangedEventArgs.ProjectFile">
            <summary>
            The project file affected
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.BuildConfigurationChangedEventArgs.BuildConfiguration">
            <summary>
            The new build configuration
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.Build.BuildConfigurationContext">
            <summary>
            Build Configuration Context implementation
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.Build.BuildConfigurationContext.ContextType">
            <summary>
            Identifies an action context that launches a debug session.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.Build.BuildConfigurationContext.ContextTypeGuid">
            <summary>
            Identifies an action context that launches a debug session.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.Build.BuildConfigurationContext.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Workspace.Build.BuildConfigurationContext"/> class.
            </summary>
            <param name="buildConfiguration">The build configuration</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.Build.BuildConfigurationContext.BuildConfiguration">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.Build.BuildUpToDateActionContext">
            <summary>
            BuildUpToDateActionContext class
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.Build.BuildUpToDateActionContext.ContextType">
            <summary>
            Identifies an action context that invoke up to date check
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.Build.BuildUpToDateActionContext.ContextTypeGuid">
            <summary>
            Guid of ContextType
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.Build.BuildUpToDateActionContext.#ctor(Microsoft.VisualStudio.Workspace.Build.IBuildUpToDateCheckProvider,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Workspace.Build.BuildUpToDateActionContext"/> class.
            </summary>
            <param name="provider">IBuildUpToDateCheckProvider provider</param>
            <param name="projectFile">The contetx project file</param>
            <param name="buildConfiguration">Optional build configuration</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.Build.BuildUpToDateActionContext.IsUpToDateAsync(System.Threading.CancellationToken)">
            <summary>
            Check if the context project file is up to date
            </summary>
            <param name="cancellationToken">A cancellation token</param>
            <returns>True or false depending if the context project file is up to date</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.Build.ExportBuildUpToDateCheckAttribute">
            <summary>
            ExportBuildUpToDateCheckAttribute class to MEF export Build up to date provider attributes
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.Build.ExportBuildUpToDateCheckAttribute.#ctor(System.String,System.String[],Microsoft.VisualStudio.Workspace.ProviderPriority)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Workspace.Build.ExportBuildUpToDateCheckAttribute"/> class.
            </summary>
            <param name="type">The unique type for this IBuildUpToDateCheckProviderMetadata</param>
            <param name="supportedFileExtensions">The supported file extension</param>
            <param name="priority">File scanner priority</param>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.Build.IBuildUpToDateCheckProvider">
            <summary>
            interface IBuildUpToDateCheckProvider
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.Build.IBuildUpToDateCheckProvider.IsUpToDateAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Check if project file is up to date based on a build configuration
            </summary>
            <param name="projectFile">The project target file to evaluate</param>
            <param name="buildConfiguration">An optional build configuration</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>true of if the project file is up to date or false otherwise</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.Build.IBuildUpToDateCheckProviderMetadata">
            <summary>
            IBuildUpToDateCheckProviderMetadata interface
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.Build.WorkspaceBuildHelper">
            <summary>
            IWorkspace helper classes for build related tasks
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.Build.WorkspaceBuildHelper.GetBuildConfigurationContextActions(Microsoft.VisualStudio.Workspace.IWorkspace,System.String,System.Guid,System.Func{Microsoft.VisualStudio.Workspace.FileContext,System.Boolean})">
            <summary>
            Get a Build Configuration Context type action
            </summary>
            <param name="workspace">Workspace instance</param>
            <param name="projectFile">The target project file</param>
            <param name="contextType">The desired context type</param>
            <param name="matchBuildConfigurationContext">Callback to invoke to match a file context</param>
            <returns>File context actions that match the passed target project build configuration</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.Build.WorkspaceBuildHelper.GetBuildConfigurationContextActions(Microsoft.VisualStudio.Workspace.IWorkspace,System.String,System.Guid,System.String)">
            <summary>
            Get a Build Configuration Context type action
            </summary>
            <param name="workspace">Workspace instance</param>
            <param name="projectFile">The target project file</param>
            <param name="contextType">The desired context type</param>
            <param name="targetProjectBuildConfiguration">Optional target project build configuration</param>
            <returns>File context actions that match the passed target project build configuration</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.Build.WorkspaceBuildHelper.GetBuildConfigurationContexts(Microsoft.VisualStudio.Workspace.IWorkspace,System.String,System.Guid,System.String)">
            <summary>
            Get all file contexts that match a specific target project build configuration
            </summary>
            <param name="workspace">Workspace instance</param>
            <param name="projectFile">The target project file</param>
            <param name="contextType">The desired context type</param>
            <param name="targetProjectBuildConfiguration">Optional target project build configuration</param>
            <returns>File Contexts grouped by provider</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.Build.WorkspaceBuildHelper.GetBuildUpToDateActionContext(Microsoft.VisualStudio.Workspace.IWorkspace,System.String,System.String)">
            <summary>
            Return a valid BuildUpToDateActionContext to a project file
            </summary>
            <param name="workspace">Workspace instance</param>
            <param name="projectFile">The target project file</param>
            <param name="targetProjectBuildConfiguration">Optional target project build configuration</param>
            <returns>Null or a valid BuildUpToDateActionContext for a project file</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.Build.WorkspaceBuildHelper.BuildProject(Microsoft.VisualStudio.Workspace.IWorkspace,System.String,System.String,System.Guid,System.IProgress{Microsoft.VisualStudio.Workspace.IFileContextActionProgressUpdate},System.Threading.CancellationToken)">
            <summary>
            Build a project by invoking a build context actions from a provider
            </summary>
            <param name="workspace">Workspace instance</param>
            <param name="projectFile">The target project file</param>
            <param name="buildConfiguration">The build configuration</param>
            <param name="buildContextType">The desired build context type</param>
            <param name="progress">A progress monitor</param>
            <param name="cancellationToken">Optional cancellation token</param>
            <returns>Completion task with build succeed result</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.Build.IBuildConfigurationContext">
            <summary>
            Define a Build Configuration Context
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.Build.IBuildConfigurationContext.BuildConfiguration">
            <summary>
            Configuration setting context
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.Debug.DebugLaunchActionContext">
            <summary>
            A Debugger Launch Action context
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.Debug.DebugLaunchActionContext.ContextType">
            <summary>
            Identifies an action context that launches a debug session.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.Debug.DebugLaunchActionContext.IsDefaultStartupProjectEntry">
            <summary>
            Startup Project name entry
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.Debug.DebugLaunchActionContext.ContextTypeGuid">
            <summary>
            Identifies an action context that launches a debug session.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.Debug.DebugLaunchActionContext.#ctor(System.String,Microsoft.VisualStudio.Workspace.Debug.ILaunchDebugTargetProvider,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Workspace.Debug.DebugLaunchActionContext"/> class.
            </summary>
            <param name="targetPath">Debug target path</param>
            <param name="provider">Provider to launch this context</param>
            <param name="buildConfiguration">Build Configuration setting</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.Debug.DebugLaunchActionContext.#ctor(Microsoft.VisualStudio.Workspace.IPropertySettings,Microsoft.VisualStudio.Workspace.Debug.ILaunchDebugTargetProvider,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Workspace.Debug.DebugLaunchActionContext"/> class.
            </summary>
            <param name="launchConfiguration">Launch configuration parameters</param>
            <param name="provider">Provider to launch this context</param>
            <param name="buildConfiguration">Build Configuration setting</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.Debug.DebugLaunchActionContext.LaunchConfiguration">
            <summary>
            Launch configuration parameters
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.Debug.DebugLaunchActionContext.LaunchDebugTarget(System.IServiceProvider)">
            <summary>
            Launch the target using the provider being initialized
            </summary>
            <param name="serviceProvider">The service provider</param>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.Debug.ExportLaunchConfigurationProviderAttribute">
            <summary>
            MEF export helper for ILaunchConfigurationProviderMetadata
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.Debug.ExportLaunchConfigurationProviderAttribute.#ctor(System.String,System.String[],System.String,System.String,System.Boolean,Microsoft.VisualStudio.Workspace.ProviderPriority)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Workspace.Debug.ExportLaunchConfigurationProviderAttribute"/> class.
            </summary>
            <param name="type">The unique type for this ILaunchDebugTargetProviderMetadata</param>
            <param name="supportedFileExtensions">The supported file extension</param>
            <param name="launchTypeName">Launch type name</param>
            <param name="launchJsonSchemaContent">Launch Json schema content</param>
            <param name="isRuntimeSuportContext">If Runtime support context is supported</param>
            <param name="priority">File scanner priority</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.Debug.ExportLaunchConfigurationProviderAttribute.LaunchTypeName">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.Debug.ExportLaunchConfigurationProviderAttribute.LaunchJsonSchemaContent">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.Debug.ExportLaunchConfigurationProviderAttribute.IsRuntimeSupportContext">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.Debug.IDebugContextAction">
            <summary>
            Specialized Context action to debug that support a build step action
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.Debug.IDebugContextAction.BuildStep">
            <summary>
            A pre build step action to invoke before the debug action is executed
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.Debug.IDebugContextBuildFailedProgress">
            <summary>
            Debug Context progress update
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.Debug.IDebugContextBuildFailedProgress.ContinueDebugging">
            <summary>
            Controls whether the debugging experience should continue or not
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.Debug.ILaunchConfigurationProvider">
            <summary>
            ILaunchConfigurationProvider interface
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.Debug.ILaunchConfigurationProvider.IsDebugLaunchActionSupported(Microsoft.VisualStudio.Workspace.Debug.DebugLaunchActionContext)">
            <summary>
            If a project file is being supported by this launch configuration provider
            </summary>
            <param name="debugLaunchActionContext">Debug Launch Action context</param>
            <returns>true if this context is being supported for this provider</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.Debug.ILaunchConfigurationProvider.CustomizeLaunchConfiguration(Microsoft.VisualStudio.Workspace.Debug.DebugLaunchActionContext,Microsoft.VisualStudio.Workspace.IPropertySettings)">
            <summary>
            Create a launch configuration settings for a project file
            </summary>
            <param name="debugLaunchActionContext">Debug Launch Action context</param>
            <param name="launchSettings">The launch ettings instance</param>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.Debug.ILaunchConfigurationProviderMetadata">
            <summary>
            ILaunchConfigurationProviderMetadata interface
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.Debug.ILaunchConfigurationProviderMetadata.LaunchTypeName">
            <summary>
            Launch type name
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.Debug.ILaunchConfigurationProviderMetadata.LaunchJsonSchemaContent">
            <summary>
            The launch json schema
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.Debug.ILaunchConfigurationProviderMetadata.IsRuntimeSupportContext">
            <summary>
            If Context support is being resolved on runtime or only by its static metadata
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.Debug.LaunchConfigurationConstants">
            <summary>
            Launch Configuration Constants
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.Debug.LaunchConfigurationConstants.NameKey">
            <summary>
            Name key
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.Debug.LaunchConfigurationConstants.ProjectKey">
            <summary>
            Project Key
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.Debug.LaunchConfigurationConstants.TypeKey">
            <summary>
            Type Key
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.Debug.LaunchConfigurationConstants.TargetKey">
            <summary>
            Target Key
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.Debug.LaunchConfigurationConstants.DebugTypeKey">
            <summary>
            Debug Type key
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.Debug.LaunchConfigurationConstants.ArgsKey">
            <summary>
            Arguments Key
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.Debug.LaunchConfigurationConstants.EnvKey">
            <summary>
            Env Key
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.Debug.LaunchConfigurationConstants.CurrentDirKey">
            <summary>
            Current Directory Key
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.Debug.LaunchConfigurationConstants.RemoteMachineKey">
            <summary>
            Remote machine key
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.Debug.LaunchConfigurationConstants.PortNameKey">
            <summary>
            Port name key
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.Debug.LaunchConfigurationConstants.DebugEngineKey">
            <summary>
            Debug engine key
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.Debug.LaunchConfigurationConstants.ConfigurationsKey">
            <summary>
            Configurations Key
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.Debug.LaunchConfigurationConstants.DefaultsKey">
            <summary>
            Defaults Key
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.Debug.LaunchConfigurationConstants.VersionKey">
            <summary>
            Defaults Key
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.Debug.LaunchConfigurationConstants.LaunchJsonVersion">
            <summary>
            Launch Json version Value
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.Debug.ExportLaunchDebugTargetAttribute">
            <summary>
            DebugLaunchActionContextAttribute class to MEF export debug launch attributes
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.Debug.ExportLaunchDebugTargetAttribute.#ctor(System.String,System.String[],System.Boolean,Microsoft.VisualStudio.Workspace.ProviderPriority)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Workspace.Debug.ExportLaunchDebugTargetAttribute"/> class.
            </summary>
            <param name="type">The unique type for this ILaunchDebugTargetProviderMetadata</param>
            <param name="supportedFileExtensions">The supported file extension</param>
            <param name="isRuntimeSuportContext">If Runtime support context is supported</param>
            <param name="priority">File scanner priority</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.Debug.ExportLaunchDebugTargetAttribute.IsRuntimeSupportContext">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.Debug.ILaunchDebugTargetProvider">
            <summary>
            IDebugLaunchActionContext interface
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.Debug.ILaunchDebugTargetProvider.LaunchDebugTarget(System.IServiceProvider,Microsoft.VisualStudio.Workspace.Debug.DebugLaunchActionContext)">
            <summary>
            Launch a Debug Context
            </summary>
            <param name="serviceProvider">The service provider context</param>
            <param name="debugLaunchActionContext">The Debug context to launch</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.Debug.ILaunchDebugTargetProvider.SupportsContext(System.String)">
            <summary>
            If this context is supported for this Provider
            </summary>
            <param name="filePath">A file workspace</param>
            <returns>true if this provider is able to handle this context</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.Debug.ILaunchDebugTargetProviderMetadata">
            <summary>
            ILaunchDebugTargetProviderMetadata interface
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.Debug.ILaunchDebugTargetProviderMetadata.IsRuntimeSupportContext">
            <summary>
            If the provider is capable to handle context
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.FileContextActionResult">
            <summary>
            Default implementation for a IFileContextActionResult interface
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.FileContextActionResult.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Workspace.FileContextActionResult"/> class.
            </summary>
            <param name="success">If success or not this result instance</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.FileContextActionResult.IsSuccess">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.IFileContextActionBase">
            <summary>
            Describes an action supported by a <see cref="T:Microsoft.VisualStudio.Workspace.IFileContextActionProvider"/>.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.IFileContextActionBase.ExecuteAsync(System.IProgress{Microsoft.VisualStudio.Workspace.IFileContextActionProgressUpdate},System.Threading.CancellationToken)">
            <summary>
            Executes the action.
            </summary>
            <param name="progress">A means to report progress as the action executes.</param>
            <param name="cancellationToken">A token that may cancel the action.</param>
            <returns>A task whose result describes the result of the action.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.IHostService">
            <summary>
            IHostService interface definition
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.IHostService.LocalAppDataLocation">
            <summary>
            Gets the path to the root directory for the host app local data.
            </summary>
            <value>An absolute path.</value>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.Indexing.FileDataValue">
            <summary>
            FileDataValue class to return from IFileScanner interface
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.Indexing.FileDataValue.#ctor(System.Guid,System.String,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Workspace.Indexing.FileDataValue"/> class.
            </summary>
            <param name="type">The type of this data value</param>
            <param name="name">Name of the entry</param>
            <param name="value">Value entry(can be null)</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.Indexing.FileDataValue.Type">
            <summary>
            Type of this scanned entry
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.Indexing.FileDataValue.Name">
            <summary>
            Name of the scanned entry
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.Indexing.FileDataValue.Value">
            <summary>
            Value of the scanned entry
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.Indexing.FileScannerInfoType">
            <summary>
            Default enumeration types for FileScannerInfo
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.Indexing.FileScannerInfoType.None">
            <summary>
            None
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.Indexing.FileScannerInfoType.Source">
            <summary>
            A source file
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.Indexing.FileScannerInfoType.Output">
            <summary>
            An output file
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.Indexing.FileScannerInfoType.ProjectReference">
            <summary>
            A Project Reference file
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.Indexing.FileScannerInfoType.Import">
            <summary>
            A imported dependency
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.Indexing.ExportFileScannerAttribute">
            <summary>
            Exports an <see cref="T:Microsoft.VisualStudio.Workspace.Indexing.IFileScanner"/> to the MEF catalog
            with metadata as described by <see cref="T:Microsoft.VisualStudio.Workspace.Indexing.IFileScannerMetadata"/>.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.Indexing.ExportFileScannerAttribute.#ctor(System.String,System.String,System.String[],System.Type[],Microsoft.VisualStudio.Workspace.ProviderPriority)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Workspace.Indexing.ExportFileScannerAttribute"/> class.
            </summary>
            <param name="type">The unique type for this IFileScannerMetadata</param>
            <param name="language">A simple name that describes the kind of files this scanner is suitable for.</param>
            <param name="supportedFileExtensions">
            The set of file extensions (including the leading period) that this scanner
            is capable of parsing.</param>
            <param name="supportedTypes">List of types supported by this file scanner</param>
            <param name="priority">File scanner priority</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.Indexing.ExportFileScannerAttribute.#ctor(System.String,System.String,System.String[],System.Type[])">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Workspace.Indexing.ExportFileScannerAttribute"/> class.
            </summary>
            <param name="type">The unique type for this IFileScannerMetadata</param>
            <param name="language">A simple name that describes the kind of files this scanner is suitable for.</param>
            <param name="supportedFileExtensions">
            The set of file extensions (including the leading period) that this scanner
            is capable of parsing.</param>
            <param name="supportedTypes">List of types supported by this file scanner</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.Indexing.ExportFileScannerAttribute.#ctor(System.String,System.String,System.String,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Workspace.Indexing.ExportFileScannerAttribute"/> class.
            </summary>
            <param name="type">The unique type for this IFileScannerMetadata</param>
            <param name="language">A simple name that describes the kind of files this scanner is suitable for.</param>
            <param name="fileExtension">The supported file extension</param>
            <param name="supportedType">The supported type to be scanned</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.Indexing.ExportFileScannerAttribute.Language">
            <summary>
            Gets a simple name that describes the kind of files this scanner is suitable for.
            </summary>
            <value>A short string, such as "C++" or "C#".</value>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.Indexing.ExportFileScannerAttribute.SupportedTypes">
            <summary>
            Gets the set of return types supported by this scanner
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.Indexing.FileIndexInfo">
            <summary>
            File Index Info
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.Indexing.FileIndexInfo.#ctor(System.Collections.Generic.IReadOnlyCollection{Microsoft.VisualStudio.Workspace.Indexing.FileScannerInfo},System.Collections.Generic.IReadOnlyCollection{Microsoft.VisualStudio.Workspace.Indexing.FileScannerInfo})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Workspace.Indexing.FileIndexInfo"/> class.
            </summary>
            <param name="references">read only collection of file references</param>
            <param name="dependencies">read only collection of file dependencies</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.Indexing.FileIndexInfo.EmptyFileScannerInfo">
            <summary>
            Empty File Scanner array
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.Indexing.FileIndexInfo.References">
            <summary>
            File References
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.Indexing.FileIndexInfo.Dependencies">
            <summary>
            File Dependencies
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.Indexing.FileIndexInfo.IsEmpty">
            <summary>
            if we have both empty containers
            </summary>
            <returns>true if both collections are empty</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.Indexing.FileScannerEventArgs">
            <summary>
            EventArg for File scanning phase
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.Indexing.FileScannerEventArgs.#ctor(System.String,System.Type,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Workspace.Indexing.FileScannerEventArgs"/> class.
            </summary>
            <param name="filePath">Relative workspace file path</param>
            <param name="filesScannerType">Type of the FileScanning phase</param>
            <param name="scannedData">scanned data value</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.Indexing.FileScannerEventArgs.WorkspaceFilePath">
            <summary>
            Relative workspace file path
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.Indexing.FileScannerEventArgs.FileScannerType">
            <summary>
            Type of the FileScanning phase
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.Indexing.FileScannerEventArgs.ScannedData">
            <summary>
            The Scanned data completed
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.Indexing.FileScannerTypes">
            <summary>
            Class FileScannerTypes
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.Indexing.FileScannerTypes.FileReferenceScannerType">
            <summary>
            File Reference scanner type
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.Indexing.FileScannerTypes.FileDataScannerType">
            <summary>
            File Data scanner type
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.Indexing.FileScannerTypes.SymbolScannerType">
            <summary>
            Symbol scanner type
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.Indexing.FileScannerTypes.FileIndexInfoType">
            <summary>
            File Index Info Type
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.Indexing.FileScannerTypes.FileDataValuesType">
            <summary>
            File Data Values Info Type
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.Indexing.FileScannerTypes.SymbolsDefinitionsType">
            <summary>
            Symbols defintion type
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.Indexing.FileScannerInfo">
            <summary>
            Describes the definition of a file reference
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.Indexing.FileScannerInfo.#ctor(System.String,System.String,System.Nullable{System.Int32},System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Workspace.Indexing.FileScannerInfo"/> class.
            </summary>
            <param name="relativePath">The file relative path</param>
            <param name="context">The context of this reference (or null)</param>
            <param name="referenceType">Type of this reference (or null)</param>
            <param name="useReferenceEntityId">If file system entity can be used</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.Indexing.FileScannerInfo.WorkspacePath">
            <summary>
            The workspace relative reference file path
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.Indexing.FileScannerInfo.Context">
            <summary>
            The Context of this Reference (or null if there is none)
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.Indexing.FileScannerInfo.UseReferenceEntityId">
            <summary>
            If File system entity can be used to track the workspace reference
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.Indexing.FileScannerInfo.ReferenceType">
            <summary>
            The reference type
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.Indexing.FileScannerInfo.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.Indexing.FileScannerInfo.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.Indexing.FileScannerInfo.Equals(Microsoft.VisualStudio.Workspace.Indexing.FileScannerInfo)">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.Indexing.IFileScanner">
            <summary>
            Offers services to discover symbols defined in source files.
            </summary>
            <remarks>
            An implementing type should export this interface with
            the <see cref="T:Microsoft.VisualStudio.Workspace.Indexing.ExportFileScannerAttribute"/>.
            Each instance of this interface should be prepared to deal with just one
            file type. If a single scanner advertises multiple
            <see cref="P:Microsoft.VisualStudio.Workspace.IFileExtensionsMetadata.SupportedFileExtensions"/>, it should be
            prepared to identify which file type it is (if necessary) based solely on
            the content of the file and not the file name.
            If the file extension is an important distinguishing factor, use multiple
            instances of this interface, each advertising support for the various file
            extensions.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.Indexing.IFileScanner.ScanContentAsync``1(System.String,System.Threading.CancellationToken)">
            <summary>
            Scan a source file for symbol definitions.
            </summary>
            <typeparam name="T">the expected type to be scanned</typeparam>
            <param name="filePath">The workspace file to scan</param>
            <param name="cancellationToken">A token that can cancel the scan.</param>
            <returns>A task whose result is the collection of discovered symbols.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.Indexing.IFileScannerMetadata">
            <summary>
            Describes an <see cref="T:Microsoft.VisualStudio.Workspace.Indexing.IFileScanner"/> extension's applicability and capabilities.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.Indexing.IFileScannerMetadata.Language">
            <summary>
            Gets a simple name that describes the kind of files this scanner is suitable for.
            </summary>
            <value>A short string, such as "C++" or "C#".</value>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.Indexing.IFileScannerMetadata.SupportedTypes">
            <summary>
            Gets the set of return types supported by this scanner
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.Indexing.IFileScannerProvider">
            <summary>
            An interface that may be exported to provide a collection of symbol scanners at runtime.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.Indexing.IFileScannerProvider.GetSymbolScannersAsync(System.Threading.CancellationToken)">
            <summary>
            Gets a collection of symbol scanners.
            </summary>
            <param name="cancellationToken">A cancellation token.</param>
            <returns>A collection of symbol scanners with metadata.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.Indexing.IIndexWorkspaceService">
            <summary>
            IIndexWorkspaceService interface definition
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.Indexing.IIndexWorkspaceService.State">
            <summary>
            Index Workspace state
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.Indexing.IIndexWorkspaceService.OnPropertyChanged">
            <summary>
            To receive notifications when properties are changed
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.Indexing.IIndexWorkspaceService.OnFileScannerCompleted">
            <summary>
            File Scanner notification
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.Indexing.IIndexWorkspaceService.EntityExists(System.String)">
            <summary>
            Verify if a path is being part of this indexing
            </summary>
            <param name="filePath">The file enetity exist</param>
            <returns>True if the indexing has this entitye </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.Indexing.IIndexWorkspaceService.RefreshElementsAsync(Microsoft.VisualStudio.Workspace.Indexing.IndexElement,System.Boolean,System.IProgress{Microsoft.VisualStudio.Workspace.Indexing.IndexProgress},System.Threading.CancellationToken)">
            <summary>
            Refreshes the contents of any caches or subscriptions with the actual contents from disk.
            </summary>
            <param name="elements">Type of elements being refreshed</param>
            <param name="continuous">
            Use <c>true</c> to continuously watch the file system and provide updates
            until <paramref name="cancellationToken"/> is canceled.
            Use <c>false</c> to refresh just once.
            </param>
            <param name="progressCallback">
            A progress reference callback
            </param>
            <param name="cancellationToken">
            A token to cancel the refresh operation.
            Must not be <see cref="P:System.Threading.CancellationToken.None"/> if <paramref name="continuous"/> is <c>true</c>.
            </param>
            <returns>A task representing the long-running operation.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.Indexing.IIndexWorkspaceService.RefreshElementAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Refresh an element
            </summary>
            <param name="filePath">Reference to element path</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>A task representing the long-running operation.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.Indexing.IIndexWorkspaceService.RefreshElementsAsync(System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)">
            <summary>
            Refresh an element
            </summary>
            <param name="filePaths">Enumerable of entities to refresh</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>A task representing the long-running operation.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.Indexing.IIndexWorkspaceService.GetFileScannerState(System.String,System.Int32)">
            <summary>
            Get the File scanner state type
            </summary>
            <param name="filePath">Reference to element path</param>
            <param name="type">Type of file scanner</param>
            <returns>Datetime when the file scanner data or null</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.Indexing.IIndexWorkspaceService.GetFileDependantsAsync(System.String,System.String,System.Int32[])">
            <summary>
            Return file dependants to a file contained in our workspace
            </summary>
            <param name="filePath">File entity path</param>
            <param name="context">Context for the reference (or null)</param>
            <param name="referenceTypes">reference types</param>
            <returns>list of dependant files</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.Indexing.IIndexWorkspaceService.GetFileReferencesAsync(System.String,System.String,System.Int32[])">
            <summary>
            Return file references to a file contained in our workspace
            </summary>
            <param name="filePath">File entity path</param>
            <param name="context">Context for the reference (or null)</param>
            <param name="referenceTypes">reference types</param>
            <returns>list of references</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.Indexing.IIndexWorkspaceService.GetFileDataValuesAsync``1(System.String,System.Guid)">
            <summary>
            Return a dictionary of data from a File system entity
            </summary>
            <typeparam name="T">Type of Value being excpected</typeparam>
            <param name="filePath">File entity path</param>
            <param name="type">The type of data being retrieved</param>
            <returns>A dictionary of data</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.Indexing.IndexProgress">
            <summary>
            IndexProgress class
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.Indexing.IndexProgress.#ctor(Microsoft.VisualStudio.Workspace.Indexing.IndexProgressState,System.Double,System.Tuple{System.Int32,System.Int32})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Workspace.Indexing.IndexProgress"/> class.
            </summary>
            <param name="state">The progress state</param>
            <param name="completed">Percent completed</param>
            <param name="currentElements">Current elements progress</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.Indexing.IndexProgress.CurrentElements">
            <summary>
            Current elements
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.Indexing.IndexProgress.State">
            <summary>
            Current state of the indexing progress
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.Indexing.IndexProgress.Completed">
            <summary>
            Gets the symbol name and location.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.Indexing.IndexProgressState">
            <summary>
            Index progress state
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.Indexing.IndexProgressState.Initialize">
            <summary>
            Initialize state
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.Indexing.IndexProgressState.FileIndexing">
            <summary>
            File indexing
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.Indexing.IndexProgressState.FileScanIndexInfo">
            <summary>
            File Index Info scanning
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.Indexing.IndexProgressState.FileScanSymbols">
            <summary>
            File symbols scanning
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.Indexing.IndexProgressState.FileScanDataValues">
            <summary>
            File Data values scanning
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.Indexing.IndexProgressState.Completed">
            <summary>
            Completed state
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.Indexing.IndexElement">
            <summary>
            The elements stored in the index.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.Indexing.IndexElement.None">
            <summary>
            No index element.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.Indexing.IndexElement.FileListing">
            <summary>
            The cache of the file listings in the workspace.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.Indexing.IndexElement.FileScanning">
            <summary>
            The cache of all symbol definitions in the workspace.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.Indexing.IndexElement.FileContexts">
            <summary>
            The cache of all the contexts in which source files may appear.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.Indexing.IndexElement.All">
            <summary>
            All elements of the cache.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.Indexing.IndexWorkspaceProperties">
            <summary>
            IndexWorkspace properties
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.Indexing.IndexWorkspaceProperties.State">
            <summary>
            State property
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.Indexing.IndexWorkspaceState">
            <summary>
            Our Index Workspace state
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.Indexing.IndexWorkspaceState.None">
            <summary>
            None
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.Indexing.IndexWorkspaceState.FileSystem">
            <summary>
            FileSystem is in progress
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.Indexing.IndexWorkspaceState.FileReferences">
            <summary>
            FileReferences is in progress
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.Indexing.IndexWorkspaceState.FileDataValues">
            <summary>
            FileDataValues is in progress
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.Indexing.IndexWorkspaceState.SymbolScanning">
            <summary>
            SymbolScanning is in progress
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.Indexing.IndexWorkspaceState.Completed">
            <summary>
            Indexing is completed
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.Indexing.SymbolAccessibility">
            <summary>
            Describes the visibility of the symbol to surrounding code.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.Indexing.SymbolAccessibility.None">
            <summary>
            None
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.Indexing.SymbolAccessibility.Public">
            <summary>
            The symbol has public visibility.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.Indexing.SymbolAccessibility.Internal">
            <summary>
            The symbol has internal visibility.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.Indexing.SymbolAccessibility.Friend">
            <summary>
            The symbol has friend visibility.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.Indexing.SymbolAccessibility.Protected">
            <summary>
            The symbol has protected visibility.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.Indexing.SymbolAccessibility.Private">
            <summary>
            The symbol has private visibility.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.Indexing.SymbolDefinition">
            <summary>
            Describes the definition of a symbol, within the context of a source file.
            </summary>
            <remarks>
            This interface does not specify the path to the source file because some
            of its producers (e.g. <see cref="T:Microsoft.VisualStudio.Workspace.Indexing.IFileScanner"/> may not know the path
            to the source file. Also, some source files may not even exist locally,
            so setting the context of which file the symbol appears in is the
            responsibility of other code that hands this interface around.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.Indexing.SymbolDefinition.#ctor(System.String,Microsoft.VisualStudio.Workspace.Indexing.SymbolKind,Microsoft.VisualStudio.Workspace.Indexing.SymbolAccessibility,Microsoft.VisualStudio.Workspace.Indexing.TextLocation)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Workspace.Indexing.SymbolDefinition"/> class.
            </summary>
            <param name="name">The name of the symbol.</param>
            <param name="kind">The kind of symbol.</param>
            <param name="accessibility">The visibility of the symbol to surrounding code.</param>
            <param name="location">The location of the definition.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.Indexing.SymbolDefinition.#ctor(System.String,System.String,Microsoft.VisualStudio.Workspace.Indexing.SymbolKind,Microsoft.VisualStudio.Workspace.Indexing.SymbolAccessibility,Microsoft.VisualStudio.Workspace.Indexing.TextLocation)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Workspace.Indexing.SymbolDefinition"/> class.
            </summary>
            <param name="name">The name of the symbol.</param>
            <param name="fullyQualifiedName">The fully-qualified name of the symbol.</param>
            <param name="kind">The kind of symbol.</param>
            <param name="accessibility">The visibility of the symbol to surrounding code.</param>
            <param name="location">The location of the definition.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.Indexing.SymbolDefinition.Name">
            <summary>
            Gets the short name of the symbol.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.Indexing.SymbolDefinition.FullyQualifiedName">
            <summary>
            Gets the fully-qualified name of the symbol.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.Indexing.SymbolDefinition.Location">
            <summary>
            Gets the position of the symbol's definition within the source file.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.Indexing.SymbolDefinition.Kind">
            <summary>
            Gets the kind of symbol.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.Indexing.SymbolDefinition.Accessibility">
            <summary>
            Gets the accessibility of the symbol.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.Indexing.SymbolDefinition.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.Indexing.SymbolDefinition.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.Indexing.SymbolDefinition.Equals(Microsoft.VisualStudio.Workspace.Indexing.SymbolDefinition)">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.Indexing.SymbolDefinitionSearchResult">
            <summary>
            Describes a symbol's definition with metadata describing where it is found.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.Indexing.SymbolDefinitionSearchResult.#ctor(Microsoft.VisualStudio.Workspace.Indexing.SymbolDefinition,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Workspace.Indexing.SymbolDefinitionSearchResult"/> class.
            </summary>
            <param name="symbol">The symbol definition.</param>
            <param name="filePath">The path to the file that defines the symbol.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.Indexing.SymbolDefinitionSearchResult.Symbol">
            <summary>
            Gets the symbol name and location.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.Indexing.SymbolDefinitionSearchResult.FilePath">
            <summary>
            Gets the absolute path to the file containing the symbol.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.Indexing.SymbolKind">
            <summary>
            Describes the various types of symbols.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.Indexing.SymbolKind.None">
            <summary>
            None
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.Indexing.SymbolKind.Class">
            <summary>
            A class.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.Indexing.SymbolKind.Constant">
            <summary>
            A constant.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.Indexing.SymbolKind.Delegate">
            <summary>
            A delegate.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.Indexing.SymbolKind.Enum">
            <summary>
            An enum.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.Indexing.SymbolKind.EnumItem">
            <summary>
            A member of an enum.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.Indexing.SymbolKind.Event">
            <summary>
            An event.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.Indexing.SymbolKind.Field">
            <summary>
            A field.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.Indexing.SymbolKind.Interface">
            <summary>
            An interface.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.Indexing.SymbolKind.Method">
            <summary>
            A method.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.Indexing.SymbolKind.Module">
            <summary>
            A module.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.Indexing.SymbolKind.Property">
            <summary>
            A property.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.Indexing.SymbolKind.Structure">
            <summary>
            A structure.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.Indexing.SymbolKind.Namespace">
            <summary>
            A namespace
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.Indexing.SymbolScannerBase">
            <summary>
            Symbol scanner base class
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.Indexing.SymbolScannerBase.ScanContentAsync``1(System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.Indexing.SymbolScannerBase.ScanSymbolsAsync(System.IO.TextReader,System.Threading.CancellationToken)">
            <summary>
            perform a symbol scanning on a file content
            </summary>
            <param name="sourceFileContent">the content of source file</param>
            <param name="cancellationToken">a cancellation token</param>
            <returns>Symbols found during scanning</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.Indexing.TextLocation">
            <summary>
            Describes a location in a text file.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.Indexing.TextLocation.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Workspace.Indexing.TextLocation"/> struct.
            </summary>
            <param name="line">The line number in the text file. Starts at 1.</param>
            <param name="column">The column number in the text file. Starts at 1.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.Indexing.TextLocation.Line">
            <summary>
            Gets the line number within the text file.
            The first line of a file is considered Line 1.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.Indexing.TextLocation.Column">
            <summary>
            Gets the column within the text file.
            The first column on a line is considered column 1.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.Indexing.TextLocation.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.Indexing.TextLocation.Equals(Microsoft.VisualStudio.Workspace.Indexing.TextLocation)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.Indexing.TextLocation.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.Indexing.TextLocation.ToString">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.Indexing.ISymbolService">
            <summary>
            A symbol type service
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.Indexing.ISymbolService.FindSymbolDefinitionsAsync(System.String,System.IProgress{Microsoft.VisualStudio.Workspace.Indexing.SymbolDefinitionSearchResult},System.Threading.CancellationToken)">
            <summary>
            Searches for symbol definitions that match a given query.
            </summary>
            <param name="query">A leading substring of the symbol to find.</param>
            <param name="progress">Receives </param>
            <param name="cancellationToken">A token that may cancel the search.</param>
            <returns>A task whose completion indicates the search is complete.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.FileSystemEventArgsHelper">
            <summary>
            Helper utils for FileSystemEventArgs class
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.FileSystemEventArgsHelper.IsDirectoryChanged(System.IO.FileSystemEventArgs)">
            <summary>
            Check if related to a directory changed event
            </summary>
            <param name="fileSystemEventArgs">The File System Event</param>
            <returns>true is a directory changed event</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.IProjectConfigurationManager">
            <summary>
            IProjectConfigurationManager interface
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.IProjectConfigurationManager.ActiveWorkspace">
            <summary>
            Active workspace
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.IProjectConfigurationManager.OnPropertyChanged">
            <summary>
            To receive notifications when properties in this are changed
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.IProjectConfigurationManager.OnBuildConfigurationChanged">
            <summary>
            Build configuration changed
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.IProjectConfigurationManager.AllProjectFileConfigurations">
            <summary>
            All project file configurations from the different sources
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.IProjectConfigurationManager.CurrentProject">
            <summary>
            Get the Current Project
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.IProjectConfigurationManager.GetProjectFileConfiguration(System.String,System.String,System.String@)">
            <summary>
            Retrieve project configuration for a Project File
            </summary>
            <param name="projectFile">The project file path</param>
            <param name="name">Optional name of the configuration</param>
            <param name="activeBuildConfiguration">The Active build configuration</param>
            <returns>A project file settings instance</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.IProjectConfigurationManager.GetBuildConfigurations(System.String)">
            <summary>
            Return all build configurations for a project file
            </summary>
            <param name="projectFile">The project file</param>
            <returns>list of build configurations or null if not found</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.IProjectConfigurationManager.GetActiveProjectBuildConfiguration(System.String)">
            <summary>
            Get active build configuration
            </summary>
            <param name="projectFile">The project file</param>
            <returns>The active buidl configuration</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.IProjectConfigurationManager.CreateCompositeLaunchSettings(System.String,Microsoft.VisualStudio.Workspace.Debug.DebugLaunchActionContext,Microsoft.VisualStudio.Workspace.IPropertySettings[])">
            <summary>
            Create Debug launch settings for a project file
            </summary>
            <param name="projectFile">The project file</param>
            <param name="debugLaunchActionContext">Debug Launch Action context</param>
            <param name="launchSettings">list of launch settings to composite</param>
            <returns>A Composite launch settings</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.IProjectConfigurationManager.CreateUpToDateBuildContextAction(System.String,Microsoft.VisualStudio.Workspace.IFileContextAction)">
            <summary>
            Return a build action based on an existing build action context
            </summary>
            <param name="projectFile">The context project file</param>
            <param name="buildContextAction">The original build context action</param>
            <returns>Completion task</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.ItemFilters.IWorkspaceItemFilter">
            <summary>
            Workspace (settings based) Item Filter;
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.ItemFilters.IWorkspaceItemFilter.FilterKey">
            <summary>
            the filter key (used to create this filter by IWorkspaceItemFilterService).
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.ItemFilters.IWorkspaceItemFilter.OnFilterChanged">
            <summary>
            Fires when fillter settings (may have) changed
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.ItemFilters.IWorkspaceItemFilter.IsFilteredAsync(System.String,System.Boolean)">
            <summary>
            Check a single item against the filter
            </summary>
            <param name="fullPath">full path to the item (file or folder) we want to check</param>
            <param name="isFolder">true to consider path a folder, flase a file</param>
            <returns>true if items is "filtered out" by curent filter settings</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.ItemFilters.IWorkspaceItemFilter.IsFilteredAsync(System.String)">
            <summary>
            Check a single item against the filter. The item must exist on disk.
            </summary>
            <param name="fullPath">full path to the item (file or folder) we want to check</param>
            <returns>true if items is "filtered out" by curent filter settings</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.ItemFilters.IWorkspaceItemFilterService">
            <summary>
            Workspace Item Filter service.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.ItemFilters.IWorkspaceItemFilterService.GetItemFilter(System.String)">
            <summary>
            Gets the Item Filter object for the given filterKey.
            </summary>
            <param name="filterKey">the item filter key.The "filterKey" is used as a name of the string array property in the Generic Workspace settings
            that contains individual filter patterns.</param>
            <returns>item filter object</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.ItemFilters.WorkspaceItemFilterChangedEventArgs">
            <summary>
            Filters change event data.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.ItemFilters.WorkspaceItemFilterChangedEventArgs.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Workspace.ItemFilters.WorkspaceItemFilterChangedEventArgs"/> class.
            </summary>
            <param name="scopePath">afected cone</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.ItemFilters.WorkspaceItemFilterChangedEventArgs.ScopePath">
            <summary>
            Full path. the ScopePath is the "root" of a subtree that is being (potentially) affected by the changes.
            All items outside the ScopePath cone are not affected by the changes.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.IWorkspaceProviderFactory`1">
            <summary>
            Provider workspace factory
            </summary>
            <typeparam name="T">Type of provider to create</typeparam>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.IWorkspaceProviderFactory`1.CreateProvider(Microsoft.VisualStudio.Workspace.IWorkspace)">
            <summary>
            Create an instance of provider
            </summary>
            <param name="workspaceContext">The workspace context</param>
            <returns>Created instance of a provider type</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.ProjectConfigurationManagerProperties">
            <summary>
            Change type enumeration
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.ProjectConfigurationManagerProperties.AllProjectFileConfigurations">
            <summary>
            AllProjectFileConfigurations property changed
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.ProjectConfigurationManagerProperties.CurrentProject">
            <summary>
            Current Active Project
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.ProjectConfigurationManagerProperties.CurrentDebugContextAction">
            <summary>
            Current Debug Context Action
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.ProjectConfigurationManagerProperties.CurrentBuildContextAction">
            <summary>
            Current Build Context Action
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.PropertyChangedEventArgs`1">
            <summary>
            PropertyChangedEventArgs class
            </summary>
            <typeparam name="T">Properties type</typeparam>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.PropertyChangedEventArgs`1.#ctor(`0[])">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Workspace.PropertyChangedEventArgs`1"/> class.
            </summary>
            <param name="properties">Array of properties that changed</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.PropertyChangedEventArgs`1.Properties">
            <summary>
            The property that changed
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.PropertyChangedEventArgs`1.HasProperty(`0)">
            <summary>
            Return true if this event contians a change for a property
            </summary>
            <param name="property">The property id</param>
            <returns>true if the property is part of this event</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.PropertySettingsHelper">
            <summary>
            Helper class for the type IPropertySettings
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.PropertySettingsHelper.Copy(Microsoft.VisualStudio.Workspace.IPropertySettings,System.Func{Microsoft.VisualStudio.Workspace.IPropertySettings})">
            <summary>
            Deep copy of a configuration instance
            </summary>
            <param name="settings">The input sttings instance</param>
            <param name="factory">Factory creator for IPropertySettings</param>
            <returns>Copy of the configuration instance</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.PropertySettingsHelper.GetValue``1(Microsoft.VisualStudio.Workspace.IPropertySettings,System.String)">
            <summary>
            Get Value of type (T)
            </summary>
            <typeparam name="T">Desired type excpected</typeparam>
            <param name="settings">The input sttings instance</param>
            <param name="key">Key to look for in the configuration</param>
            <returns>The value contained in the configuration</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.PropertySettingsHelper.GetValue``1(Microsoft.VisualStudio.Workspace.IPropertySettings,System.String,``0)">
            <summary>
            Get Value of type (T)
            </summary>
            <typeparam name="T">Desired type expected</typeparam>
            <param name="settings">The setting instnace</param>
            <param name="key">Key to look for in the configuration</param>
            <param name="defaultValue">Default value to provide if no value is found</param>
            <returns>The value contained in the configuration or the default value being passed</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.PropertySettingsHelper.GetValues(Microsoft.VisualStudio.Workspace.IPropertySettings,System.Object,System.Reflection.PropertyInfo[],System.Func{System.String,System.String})">
            <summary>
            GetValues using Reflection API
            </summary>
            <param name="settings">The setting instance</param>
            <param name="target">Target object to set values</param>
            <param name="properties">List of property infos to populate</param>
            <param name="propertyNameConverter">An optional property name converter</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.PropertySettingsHelper.GetValues(Microsoft.VisualStudio.Workspace.IPropertySettings,System.Object,System.Reflection.BindingFlags,System.Func{System.String,System.String})">
            <summary>
            GetValues using Reflection API
            </summary>
            <param name="settings">The setting instance</param>
            <param name="target">Target object to set values</param>
            <param name="bindingAttr">Binding flags of target</param>
            <param name="propertyNameConverter">An optional property name converter</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.PropertySettingsHelper.SetValues(Microsoft.VisualStudio.Workspace.IPropertySettings,System.Object,System.Reflection.PropertyInfo[],System.Func{System.String,System.String})">
            <summary>
            SetValues using Reflection API
            </summary>
            <param name="settings">The setting instance</param>
            <param name="source">Source object to get values</param>
            <param name="properties">List of property infos to populate</param>
            <param name="propertyNameConverter">An optional property name converter</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.PropertySettingsHelper.SetValues(Microsoft.VisualStudio.Workspace.IPropertySettings,System.Object,System.Reflection.BindingFlags,System.Func{System.String,System.String})">
            <summary>
            SetValues using Reflection API
            </summary>
            <param name="settings">The setting instance</param>
            <param name="source">Source object to get values</param>
            <param name="bindingAttr">Binding flags of target</param>
            <param name="propertyNameConverter">An optional property name converter</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.PropertySettingsHelper.GetPropertyInfos(System.Type,System.String[])">
            <summary>
            Return an array of PropertyInfo from a type
            </summary>
            <param name="type">The type class</param>
            <param name="propertyNames">List of property names</param>
            <returns>Array of PropertyInfo types</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.ExportFileContextActionProviderAttribute">
            <summary>
            Exports an <see cref="T:Microsoft.VisualStudio.Workspace.IFileContextActionProvider"/> to the MEF catalog
            with metadata as described by <see cref="T:Microsoft.VisualStudio.Workspace.IFileContextActionProviderMetadata"/>.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.ExportFileContextActionProviderAttribute.#ctor(System.String,Microsoft.VisualStudio.Workspace.ProviderPriority,System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Workspace.ExportFileContextActionProviderAttribute"/> class.
            </summary>
            <param name="type">The unique type for this IFileContextActionProviderMetadata</param>
            <param name="priority">The provider priority</param>
            <param name="supportedContextTypeGuids">
            A collection of GUIDs that identify the <see cref="P:Microsoft.VisualStudio.Workspace.FileContext.ContextType"/> values
            that this language service can initialize from.
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.ExportFileContextActionProviderAttribute.#ctor(System.String,System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Workspace.ExportFileContextActionProviderAttribute"/> class.
            </summary>
            <param name="type">The unique type for this IFileContextActionProviderMetadata</param>
            <param name="supportedContextTypeGuids">
            A collection of GUIDs that identify the <see cref="P:Microsoft.VisualStudio.Workspace.FileContext.ContextType"/> values
            that this language service can initialize from.
            </param>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.ExportFileContextActionProviderAttribute.SupportedContextTypes">
            <summary>
            Gets a collection of GUIDs that identify the <see cref="P:Microsoft.VisualStudio.Workspace.FileContext.ContextType"/> values
            that this build action provider may provide build actions for.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.ExportFileContextProviderAttribute">
            <summary>
            Exports an <see cref="T:Microsoft.VisualStudio.Workspace.IFileContextProvider"/> to the MEF catalog
            with metadata as described by <see cref="T:Microsoft.VisualStudio.Workspace.IFileContextProviderMetadata"/>.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.ExportFileContextProviderAttribute.#ctor(System.String,Microsoft.VisualStudio.Workspace.ProviderPriority,System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Workspace.ExportFileContextProviderAttribute"/> class.
            </summary>
            <param name="type">The unique type for this IFileContextProviderMetadata</param>
            <param name="priority">The provider priority</param>
            <param name="supportedContextTypeGuids">
            A collection of the values that may be produced for <see cref="P:Microsoft.VisualStudio.Workspace.FileContext.ContextType"/>
            by this provider.
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.ExportFileContextProviderAttribute.#ctor(System.String,System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Workspace.ExportFileContextProviderAttribute"/> class.
            </summary>
            <param name="type">The unique type for this IFileContextProviderMetadata</param>
            <param name="supportedContextTypeGuids">
            A collection of the values that may be produced for <see cref="P:Microsoft.VisualStudio.Workspace.FileContext.ContextType"/>
            by this provider.
            </param>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.ExportFileContextProviderAttribute.SupportedContextTypes">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.ExportFileExtensionsAttributeBase">
            <summary>
            Export File Extension provide base
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.ExportFileExtensionsAttributeBase.#ctor(System.String,System.String[],Microsoft.VisualStudio.Workspace.ProviderPriority,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Workspace.ExportFileExtensionsAttributeBase"/> class.
            </summary>
            <param name="type">The unique type for this Provider</param>
            <param name="supportedFileExtensions">
            The set of file extensions (including the leading period) that this scanner
            is capable of parsing.</param>
            <param name="priority">Provider priority</param>
            <param name="contractType">Contract type</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.ExportFileExtensionsAttributeBase.SupportedFileExtensions">
            <summary>
            Gets the set of file extensions (including the leading period) that this provider
            is capable of.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.Intellisense.ExportLanguageServiceProviderAttribute">
            <summary>
            Exports an <see cref="T:Microsoft.VisualStudio.Workspace.Intellisense.ILanguageServiceProvider"/> to the MEF catalog
            with metadata as described by <see cref="T:Microsoft.VisualStudio.Workspace.Intellisense.ILanguageServiceProviderMetadata"/>.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.Intellisense.ExportLanguageServiceProviderAttribute.#ctor(System.String,Microsoft.VisualStudio.Workspace.ProviderPriority,System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Workspace.Intellisense.ExportLanguageServiceProviderAttribute"/> class.
            </summary>
            <param name="type">The unique type for this ILanguageServiceProviderMetadata</param>
            <param name="priority">The provider priority</param>
            <param name="supportedContextTypeGuids">
            A collection of GUIDs that identify the <see cref="P:Microsoft.VisualStudio.Workspace.FileContext.ContextType"/> values
            that this language service can initialize from.
            </param>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.Intellisense.ExportLanguageServiceProviderAttribute.SupportedContextTypes">
            <summary>
            Gets a collection of GUIDs that identify the <see cref="P:Microsoft.VisualStudio.Workspace.FileContext.ContextType"/> values
            that this language service can initialize from.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.Intellisense.ILanguageServiceProvider">
            <summary>
            Offers language service activation for open files.
            </summary>
            <remarks>
            An implementing type should export this interface with
            the <see cref="T:Microsoft.VisualStudio.Workspace.Intellisense.ExportLanguageServiceProviderAttribute"/>.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.Intellisense.ILanguageServiceProvider.InitializeAsync(System.String,System.Collections.Generic.IReadOnlyCollection{Microsoft.VisualStudio.Workspace.FileContext},System.Threading.CancellationToken)">
            <summary>
            Initializes the language service for the specified file, or updates it with a new set of contexts.
            </summary>
            <param name="filePath">The absolute path of the file to initialize the language service for.</param>
            <param name="fileContexts">The contexts available for this file.</param>
            <param name="cancellationToken">A token that may cancel initialization of the language service.</param>
            <returns>A task that tracks the asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.Intellisense.ILanguageServiceProvider.UninitializeAsync(System.String)">
            <summary>
            Removes the language service integration for the specified file.
            </summary>
            <param name="filePath">The absolute path of the file to initialize the language service for.</param>
            <returns>A task that tracks the asynchronous operation.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.Intellisense.ILanguageServiceProviderMetadata">
            <summary>
            Describes an <see cref="T:Microsoft.VisualStudio.Workspace.Intellisense.ILanguageServiceProvider"/> extension's applicability and capabilities.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.ExportProviderAttributeBase">
            <summary>
            Base export attribute to support IProviderMetadataBase
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.ExportProviderAttributeBase.#ctor(System.String,Microsoft.VisualStudio.Workspace.ProviderPriority,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Workspace.ExportProviderAttributeBase"/> class.
            </summary>
            <param name="type">The unique type for this IProviderMetadataBase</param>
            <param name="priority">The provider priority</param>
            <param name="contractType">Contract Type</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.ExportProviderAttributeBase.#ctor(System.String,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Workspace.ExportProviderAttributeBase"/> class.
            </summary>
            <param name="type">The unique type for this IProviderMetadataBase</param>
            <param name="contractType">Contract Type</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.ExportProviderAttributeBase.Type">
            <summary>
            The unique type for this IProviderMetadataBase
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.ExportProviderAttributeBase.Priority">
            <summary>
            The provider export Priority
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.FileContext">
            <summary>
            Describes the context a file may belong to, such as a compilation unit for a source file,
            a consuming HTML page for a .js file, etc.
            </summary>
            <remarks>
            An instance of this type may be shared across many files, or members of the context.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.FileContext.#ctor(System.Guid,System.Guid,System.Object,System.Collections.Generic.IReadOnlyCollection{System.String},System.String,Microsoft.VisualStudio.Workspace.INotifyFileContextChanged)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Workspace.FileContext"/> class.
            </summary>
            <param name="providerType">
            An identifier for the type of the proivider who create thif Context
            </param>
            <param name="contextType">
            An identifier for the type of object and data represented in <paramref name="context"/>.
            This may be used to match with a compatible language service provider.
            </param>
            <param name="context">
            The information a language service would need to fully initialize for a member of this context.
            </param>
            <param name="inputFiles">
            The set of workspace-relative paths to files that served as inputs to the construction of this context.
            This is *not* the set of files that would be read during execution of a build.
            </param>
            <param name="displayName">
            The user-friendly name for this context (e.g. "Debug|Any CPU"). May be empty, but must not be null.
            </param>
            <param name="notifyFileContextChanged">
            The INotifyFileContextChanged implementation to use it for notification
            </param>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.FileContext.OnFileContextChanged">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.FileContext.ProviderType">
            <summary>
            The Provider source for this Context
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.FileContext.ContextType">
            <summary>
            Gets an identifier for the type of object and data represented in <see cref="P:Microsoft.VisualStudio.Workspace.FileContext.Context"/>.
            This may be used to match with a compatible language service provider.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.FileContext.Context">
            <summary>
            Gets the information a language service would need
            to fully initialize for a member of this context.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.FileContext.InputFiles">
            <summary>
            Gets the set of workspace-relative paths to files that served as inputs to computing this context.
            This is *not* the set of source files that would go into a compilation unit, but rather
            the set of files read to determine *how* to assembly the context.
            </summary>
            <remarks>
            This collection may be used to know when to refresh this context
            (e.g. when the user changes the project file or project.lock.json).
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.FileContext.DisplayName">
            <summary>
            Gets the name for this context (if any) that may be displayed to the user
            to pick among several available contexts.
            </summary>
            <value>
            Typically a full configuration name (e.g. "Debug|Any CPU").
            But may be <see cref="F:System.String.Empty"/>. Never null.
            </value>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.FileContextActionDelegate">
            <summary>
            FileContextActionDelegate class
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.FileContextActionDelegate.#ctor(Microsoft.VisualStudio.Workspace.IFileContextAction,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Workspace.FileContextActionDelegate"/> class.
            </summary>
            <param name="fileContextAction">The delegate IFileContextAction</param>
            <param name="displayName">Display name</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.FileContextActionDelegate.DisplayName">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.FileContextActionDelegate.Source">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.FileContextActionDelegate.InnerAction">
            <summary>
            The inner action of this delegate.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.FileContextActionDelegate.ExecuteAsync(System.IProgress{Microsoft.VisualStudio.Workspace.IFileContextActionProgressUpdate},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.Grouping`2">
            <summary>
            A trivial implementation of <see cref="T:System.Linq.IGrouping`2"/>.
            </summary>
            <typeparam name="TKey">The key of the group.</typeparam>
            <typeparam name="TElement">The element type of the group.</typeparam>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.Grouping`2.elements">
            <summary>
            The elements in the group.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.Grouping`2.#ctor(`0,System.Collections.Generic.IEnumerable{`1})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Workspace.Grouping`2"/> class.
            </summary>
            <param name="key">The key for this group.</param>
            <param name="elements">The elements in this group.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.Grouping`2.Key">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.Grouping`2.GetEnumerator">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.Grouping`2.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.IPropertySettings">
            <summary>
            IPropertySettings interface
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.PropertySettings">
            <summary>
            Default IPropertySettings implementation
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.PropertySettings.#ctor(System.Collections.Generic.KeyValuePair{System.String,System.Object}[])">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Workspace.PropertySettings"/> class.
            </summary>
            <param name="settings">Array of KeyValuePair to initialize</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.PropertySettings.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Workspace.PropertySettings"/> class.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.PropertySettings.Item(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.PropertySettings.Add(System.String,System.Object)">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.IFileContextAction">
            <summary>
            Describes an action supported by a <see cref="T:Microsoft.VisualStudio.Workspace.IFileContextActionProvider"/>.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.IFileContextAction.Source">
            <summary>
            File Context source of this Action
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.IFileContextAction.DisplayName">
            <summary>
            Gets the name of this action as it should be presented to the user.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.IFileContextActionProgressUpdate">
            <summary>
            Provides an update on the progress of an ongoing <see cref="M:Microsoft.VisualStudio.Workspace.IFileContextActionBase.ExecuteAsync(System.IProgress{Microsoft.VisualStudio.Workspace.IFileContextActionProgressUpdate},System.Threading.CancellationToken)"/> operation.
            </summary>
            <remarks>
            Other interfaces may be implemented by objects that implement this interface in order to provide
            action specific updates.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.IFileContextActionProvider">
            <summary>
            Offers arbitrary action execution for files.
            </summary>
            <remarks>
            An implementing type should export this interface with
            the <see cref="T:Microsoft.VisualStudio.Workspace.ExportFileContextActionProviderAttribute"/>.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.IFileContextActionProvider.GetActionsAsync(System.String,Microsoft.VisualStudio.Workspace.FileContext,System.Threading.CancellationToken)">
            <summary>
            Gets the actions appropriate for a given file and context.
            </summary>
            <param name="filePath">
            The file workspace being passed
            </param>
            <param name="fileContext">The context to act with.</param>
            <param name="cancellationToken">A token that may cancel the request.</param>
            <returns>
            A task whose result is a list of actions that may be invoked for a given file and context.
            </returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.IFileContextActionProviderMetadata">
            <summary>
            Describes an <see cref="T:Microsoft.VisualStudio.Workspace.IFileContextActionProvider"/> extension's applicability and capabilities.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.IFileContextActionResult">
            <summary>
            Describes the result of some <see cref="T:Microsoft.VisualStudio.Workspace.IFileContextAction"/>.
            </summary>
            <remarks>
            Other interfaces may be implemented by objects that implement this interface
            in order to provide data that is specific to a particular kind of action.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.IFileContextActionResult.IsSuccess">
            <summary>
            Gets a value indicating whether the action was successful.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.IFileExtensionsMetadata">
            <summary>
            Describes an <see cref="T:Microsoft.VisualStudio.Workspace.IFileExtensionsMetadata"/>
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.IFileExtensionsMetadata.SupportedFileExtensions">
            <summary>
            Gets the set of file extensions (including the leading period) that this extension
            is capable of parsing.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.INotifyFileContextChanged">
            <summary>
            Interface to provide an action when a file context has been modified
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.INotifyFileContextChanged.OnFileContextChanged">
            <summary>
            When the File Context has changed
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.IFileContextConsumerMetadata">
            <summary>
            An interface describing metadata found on exports that consume specific types of file contexts.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.IFileContextConsumerMetadata.SupportedContextTypes">
            <summary>
            Gets a collection of GUIDs that identify the <see cref="P:Microsoft.VisualStudio.Workspace.FileContext.ContextType"/> values
            that this language service can initialize from.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.IFileContextProvider">
            <summary>
            Offers services to discover contexts defined in source files.
            </summary>
            <remarks>
            <para>
            An implementing type should export this interface using
            the <see cref="T:Microsoft.VisualStudio.Workspace.ExportFileContextProviderAttribute"/>.
            </para>
            <para>
            Implementations should register contexts both for source files and outputs
            that may serve as inputs to other contexts.
            For example when a project B references project A, someone interested in initializing
            a language service for B may need to discover the context for A given A's primary output,
            which serves as an input for B.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.IFileContextProvider.GetContextsForFileAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Finds contexts for a given file.
            </summary>
            <param name="filePath">
            The file workspace being passed
            </param>
            <param name="cancellationToken">A token whose cancellation should terminate the search.</param>
            <returns>
            A task whose result is collection of contexts that the file belongs to.
            The collection should never be null, but it may be empty.
            </returns>
            <remarks>
            A file may belong to contexts that are not discoverable on-demand with this method.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.IFileContextProviderMetadata">
            <summary>
            Describes an <see cref="T:Microsoft.VisualStudio.Workspace.IFileContextProvider"/> extension's applicability and capabilities.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.IFileContextProviderMetadata.SupportedContextTypes">
            <summary>
            Gets a collection of the values that may be produced for <see cref="P:Microsoft.VisualStudio.Workspace.FileContext.ContextType"/>
            by this provider.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.FileSystemContextChanged">
            <summary>
            Class FileSystemContextChanged.
            Use the workspace file system watcher notification to propagate a FileContext notification
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.FileSystemContextChanged.#ctor(Microsoft.VisualStudio.Workspace.IWorkspace,System.Func{System.IO.FileSystemEventArgs,System.Boolean})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Workspace.FileSystemContextChanged"/> class.
            </summary>
            <param name="workspace">Workspace instance</param>
            <param name="fileSystemEventFilter">Teh file system event filter to apply</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.FileSystemContextChanged.#ctor(Microsoft.VisualStudio.Workspace.IWorkspace,System.Collections.Generic.IEnumerable{System.String},System.IO.WatcherChangeTypes)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Workspace.FileSystemContextChanged"/> class.
            </summary>
            <param name="workspace">Workspace instance</param>
            <param name="inputFiles">Input files to track</param>
            <param name="watcherChangeTypes">Change types to track</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.FileSystemContextChanged.OnFileContextChanged">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.NotifyFileContextChangedHelper">
            <summary>
            Class NotifyFileContextChanged
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.NotifyFileContextChangedHelper.#ctor(System.Action{System.Boolean})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Workspace.NotifyFileContextChangedHelper"/> class.
            </summary>
            <param name="onNotifyFileContextChanged">Callback action when subscriptions changed</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.NotifyFileContextChangedHelper.OnInvocationListChanged(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.IAsyncDisposable">
            <summary>
            A interface that allow to be dispose usign an async mechanism
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.IAsyncDisposable.DisposeAsync">
            <summary>
            Dipose usign async mechanism
            </summary>
            <returns>Completion task</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.IFileWatcherService">
            <summary>
            Interface IFileWatcherService
            Sink events to receive file system notification changes using an async pattern
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.IFileWatcherService.OnFileSystemChanged">
            <summary>
            Event File system notification
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.IFileWatcherService.OnBatchFileSystemChanged">
            <summary>
            Batch Event File system notification
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.IFindFilesService">
            <summary>
            Workspace service to find files
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.IFindFilesService.FindFilesAsync(System.String,System.IProgress{System.String},System.Threading.CancellationToken)">
            <summary>
            Searches the workspace for files matching a pattern.
            </summary>
            <param name="query">The query to match filenames on. It may be matched based on substring, or a richer parsing of the files.</param>
            <param name="progress">Receives the full path to each file as it is discovered.</param>
            <param name="cancellationToken">A token whose cancellation will cancel the query.</param>
            <returns>A task that completes when all match files have been reported.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.IProviderMetadataBase">
            <summary>
            Provider Metadata Base
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.IProviderMetadataBase.Type">
            <summary>
            The Unique Type for this Provider
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.IProviderMetadataBase.Priority">
            <summary>
            Provider priority
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.IWorkspace">
            <summary>
            IWorkspace interface definition
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.IWorkspace.Location">
            <summary>
            Gets the path to the root directory of the source tree.
            </summary>
            <value>An absolute path.</value>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.IWorkspace.MakeRooted(System.String)">
            <summary>
            Gets the absolute path for a given path, which may be relative to Workspace.Location.
            </summary>
            <param name="subPath">
            The path that is absolute, or relative to the workspace root folder.
            May be empty.
            </param>
            <returns>An absolute path.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.IWorkspace.MakeRelative(System.String)">
            <summary>
            Converts an absolute path to a path relative to the root of this workspace.
            </summary>
            <param name="path">The path to make relative.</param>
            <returns>A relative path.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.IWorkspace.GetFileContextsAsync(System.String,System.Collections.Generic.IEnumerable{System.Guid},System.Threading.CancellationToken)">
            <summary>
            Gets the file contexts associated with the specified workspace location.
            </summary>
            <param name="path">
            The path to the file or folder for which a context is required.
            May be absolute or relative to workspace root <see cref="P:Microsoft.VisualStudio.Workspace.IWorkspace.Location"/>.
            </param>
            <param name="fileContextTypes">The collection of file context types of interest ot the caller.</param>
            <param name="cancellationToken">A cancellation token.</param>
            <returns>The collection of applicable file context providers.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.IWorkspace.GetFileContextsForLanguageServicesAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Return matched ILanguageServiceProvider's for a file context path
            </summary>
            <param name="filePath">Absolute path of the file which will provide the context</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Collection with matched services with it's file contexts</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.IWorkspace.GetFileContextActionsAsync(System.String,System.Collections.Generic.IEnumerable{System.Guid},System.Threading.CancellationToken)">
            <summary>
            Gets the actions available at the specified path.
            </summary>
            <param name="path">
            The path to the file or folder for which a context is required.
            May be absolute or relative to workspace root <see cref="P:Microsoft.VisualStudio.Workspace.IWorkspace.Location"/>.
            </param>
            <param name="fileContextTypes">Optional list of file context types</param>
            <param name="cancellationToken">A cancellation token.</param>
            <returns>
            A task whose result is a collection of actions that can be taken on the specified <paramref name="path"/>.
            The collection should never be null, but it may be empty.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.IWorkspace.GetFilesAsync(System.String,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Gets a set of files within the workspace.
            </summary>
            <param name="subPath">
            The folder within the workspace that should be searched for files.
            May be absolute, or relative to the <see cref="P:Microsoft.VisualStudio.Workspace.IWorkspace.Location"/>.
            An empty path is interpreted as the workspace root.
            </param>
            <param name="recursive">
            <c>true</c> to return files in <paramref name="subPath"/> and its subfolders;
            <c>false</c> to return only files found in the immediate folder.
            </param>
            <param name="cancellationToken">A token that cancels the query.</param>
            <returns>A task whose result is the set of files found.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.IWorkspace.GetDirectoriesAsync(System.String,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Gets a set of directories within the workspace.
            </summary>
            <param name="subPath">
            The folder within the workspace that should be searched for directories.
            May be absolute, or relative to the <see cref="P:Microsoft.VisualStudio.Workspace.IWorkspace.Location"/>.
            An empty path is interpreted as the workspace root.
            </param>
            <param name="recursive">
            <c>true</c> to return files in <paramref name="subPath"/> and its subfolders;
            <c>false</c> to return only files found in the immediate folder.
            </param>
            <param name="cancellationToken">A token that cancels the query.</param>
            <returns>A task whose result is the set of files found.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.Logging.LoggerListener">
            <summary>
            Logger listener delegate
            </summary>
            <param name="logRecord">Log Record generated</param>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.Logging.Logger">
            <summary>
            Workspace Logger class
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.Logging.Logger.CurrentLevel">
            <summary>
            CurrentLevel Singleton property
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.Logging.Logger.Name">
            <summary>
            Name property
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.Logging.Logger.Level">
            <summary>
            Level property
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.Logging.Logger.GetLogger(System.String)">
            <summary>
            Create a logger instance using a name
            </summary>
            <param name="name">name of the logger</param>
            <returns>a Logger class instance</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.Logging.Logger.AddListener(Microsoft.VisualStudio.Workspace.Logging.LoggerListener)">
            <summary>
            Add a logger listener delegete
            </summary>
            <param name="listener">listener delegate instance</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.Logging.Logger.RemoveListener(Microsoft.VisualStudio.Workspace.Logging.LoggerListener)">
            <summary>
            Remove a logger listener delegete
            </summary>
            <param name="listener">listener delegate instance</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.Logging.Logger.Log(Microsoft.VisualStudio.Workspace.Logging.LoggingLevel,System.String,System.Object[])">
            <summary>
            Log a message
            </summary>
            <param name="level">level desired for this message</param>
            <param name="message">Message being logged</param>
            <param name="messageArguments">Message arguments being passed</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.Logging.Logger.IsEnabled(Microsoft.VisualStudio.Workspace.Logging.LoggingLevel)">
            <summary>
            Return true if a logging level is enabled
            </summary>
            <param name="level">level desired to evlauate</param>
            <returns>true if the level is enabled</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.Logging.Logger.Error(System.String,System.Object[])">
            <summary>
            Error logging level
            </summary>
            <param name="message">Message being logged</param>
            <param name="messageArguments">Message arguments being passed</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.Logging.Logger.Debug(System.String,System.Object[])">
            <summary>
            Debug logging level
            </summary>
            <param name="message">Message being logged</param>
            <param name="messageArguments">Message arguments being passed</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.Logging.Logger.Info(System.String,System.Object[])">
            <summary>
            Info logging level
            </summary>
            <param name="message">Message being logged</param>
            <param name="messageArguments">Message arguments being passed</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.Logging.Logger.LoggerInstance.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Workspace.Logging.Logger.LoggerInstance"/> class.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.Logging.Logger.LoggerInstance.Level">
            <summary>
            Logging level property
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.Logging.Logger.LoggerInstance.AddListener(Microsoft.VisualStudio.Workspace.Logging.LoggerListener)">
            <summary>
            Add a logger listener delegete
            </summary>
            <param name="listener">listener delegate instance</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.Logging.Logger.LoggerInstance.RemoveListener(Microsoft.VisualStudio.Workspace.Logging.LoggerListener)">
            <summary>
            Remove a logger listener delegete
            </summary>
            <param name="listener">listener delegate instance</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.Logging.Logger.LoggerInstance.LogInternal(Microsoft.VisualStudio.Workspace.Logging.Logger,Microsoft.VisualStudio.Workspace.Logging.LoggingLevel,System.String)">
            <summary>
            Log internal
            </summary>
            <param name="logger">the Logger instance</param>
            <param name="level">level desired</param>
            <param name="message">Message being logged</param>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.Logging.LoggingLevel">
            <summary>
            Logging level enumeration
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.Logging.LoggingLevel.Off">
            <summary>
            Logging is off
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.Logging.LoggingLevel.Fatal">
            <summary>
            Fatal level
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.Logging.LoggingLevel.Error">
            <summary>
            Error level
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.Logging.LoggingLevel.Warn">
            <summary>
            Warning level
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.Logging.LoggingLevel.Info">
            <summary>
            Info level
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.Logging.LoggingLevel.Debug">
            <summary>
            Debug level
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.Logging.LoggingLevel.Trace">
            <summary>
            Trace level
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.Logging.LogRecord">
            <summary>
            LogRecord class
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.Logging.LogRecord.#ctor(Microsoft.VisualStudio.Workspace.Logging.Logger,Microsoft.VisualStudio.Workspace.Logging.LoggingLevel,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Workspace.Logging.LogRecord"/> class.
            </summary>
            <param name="logger">Logger instance</param>
            <param name="level">desired level</param>
            <param name="message">Message being logged</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.Logging.LogRecord.Logger">
            <summary>
            Logger instance who generated this Record
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.Logging.LogRecord.Level">
            <summary>
            Logging level of the Record
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.Logging.LogRecord.Timestamp">
            <summary>
            When logging happened
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.Logging.LogRecord.ThreadId">
            <summary>
            Managed thread id of Record
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.Logging.LogRecord.Message">
            <summary>
            Message being logged
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.ProviderPriority">
            <summary>
            Priority enum for Providers
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.ProviderPriority.Lowest">
            <summary>
            Lowest priority
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.ProviderPriority.BelowNormal">
            <summary>
            BelowNormal priority
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.ProviderPriority.Normal">
            <summary>
            Normal priority
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.ProviderPriority.AboveNormal">
            <summary>
            AboveNormal priority
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.ProviderPriority.Highest">
            <summary>
            Highest priority
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.Settings.WorkspaceSettingsResult">
            <summary>
            Result of retreival a single setting value from the current settings files.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.Settings.WorkspaceSettingsResult.Success">
            <summary>
            the value was successfuly read from a settings file. This result means there is a such an element set in settings file.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.Settings.WorkspaceSettingsResult.Undefined">
            <summary>
            The value is not present in the settings file. A default value is returned instead.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.Settings.WorkspaceSettingsResult.Error">
            <summary>
            The value is present in the settings file, but it is corrupted (for example wrong type). A default value is returned instead.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.Settings.IWorkspaceSettings">
            <summary>
            Workspace Settings inteface.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.Settings.IWorkspaceSettings.ScopePath">
            <summary>
            Get the absolute path for the property scope where definition originate.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.Settings.IWorkspaceSettings.Parent">
            <summary>
            Parent (lower priority) Settings wrapper.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.Settings.IWorkspaceSettings.GetProperty``1(System.String,``0@,Microsoft.VisualStudio.Workspace.Settings.IWorkspaceSettings@,``0)">
            <summary>
            get a [base] settings value (property), the type and meaning of the value is defined by the caller.
            This override also specifies the particular settings source that provided the value.
            Used in cases where implied root is needed, or when doing "unification" for arrays.
            </summary>
            <typeparam name="T">type of the value</typeparam>
            <param name="key">the name of the property</param>
            <param name="value">the current value as persisted in the settings</param>
            <param name="originator">the workspace settings source that is prividing the value.</param>
            <param name="defaultValue">optional default value to use if the current value is not present or corrupted</param>
            <returns>see WorkspaceSettingsResult</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.Settings.IWorkspaceSettingsManager">
            <summary>
            Per workspace object that is responsible for facilitating the reading and writing the workspace settings as well as coresponding notifications.
            Retreived by "Workspace.SettingsManager".
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.Settings.IWorkspaceSettingsManager.OnWorkspaceSettingsChanged">
            <summary>
            Event fire when a setting source (a file or in memory provider) changes.
            Listeners would need to reaquire (via GetAggregatedSettingsAsync) a new settings collection if they need to reflect the settings changes.
            The SettingsChangedEventArgs parameter can be used to narrow down the changes to a particular settings type and scopePath.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.Settings.IWorkspaceSettingsManager.GetAggregatedSettingsAsync(System.String,System.String)">
             <summary>
             the settings reader (note that when reading the settings hierarchy is already applied, the consumer should not diferentiate between where property is defined on use).
             The object returned by this property is immutable. when changes happen a new object will be create (and OnWorkspaceSettingsChanged fired).
            
             will apply build in inheritance override rules(aka PerUser > PerWorkspace > PerMachine) and return the winning value for a named property, array or child settings
             </summary>
             <param name="type">settings type (coresponding to the independent settings file name) Use SettingsTypes class constants</param>
             <param name="scopePath">location under workspace we reqire the settings for. Note that because of hierarchical aggregation model different parts of the workspace tree will have
             different settings values.
             </param>
             <returns>settings reader</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.Settings.IWorkspaceSettingsManager.GetSettingsAsync(System.String)">
            <summary>
            "Parse" a single single settings file.
            </summary>
            <param name="settingsFile">the full path to a settings file</param>
            <returns>the settings object</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.Settings.IWorkspaceSettingsManager.GetPersistanceAsync(System.Boolean)">
            <summary>
            Access the settings writer. All changes made are in memory untill the writer is released.
            note we will not lock any of the settings files untill commit. Also we are not going to lock the writer within the process.
            the individual actions (like individual property writes) will be protected.
            We would ensure a machine-wise locking via named event, which will protect against multiple VS instance writing at the same time,
            yet it would be possible if via other editor (notepad) or when settings file is shared on network, to have a conflicting writes.
            in this rare case comit may still fail.
            </summary>
            <param name="autoCommit">if true the caller does not need to call commit at the end (note it is still possible to abort)</param>
            <returns>the persistance instance</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.Settings.IWorkspaceSettingsSource">
            <summary>
            Workspace Settings inteface.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.Settings.IWorkspaceSettingsSource.GetKeys">
            <summary>
            Enumerate all available property names.
            </summary>
            <returns>property names enumerator</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.Settings.IWorkspaceSettingsSource.GetProperty``1(System.String,``0@,``0)">
            <summary>
            get a [base] settings value (property), the type and meaning of the value is defined by the caller.
            </summary>
            <typeparam name="T">type of the value</typeparam>
            <param name="key">the name of the property</param>
            <param name="value">the current value as persisted in the settings</param>
            <param name="defaultValue">optional default value to use if the current value is not present or corrupted</param>
            <returns>see WorkspaceSettingsResult</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.Settings.IWorkspaceSettingsPersistance">
            <summary>
            transactional writer. Note within the single VS process multiple of this can be active simultaneosly.
            Last release will trigger settings file writes on disk. It is expected that the persistance writer wrappes to be very short lived.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.Settings.IWorkspaceSettingsPersistance.GetWriter(System.String,System.String)">
            <summary>
            Get a writer for a single file.
            </summary>
            <param name="type">settings tupe (coresponding to the independent settings file name) Use SettingsTypes class constants</param>
            <param name="location">(relative) location under workspace root where to place the file.
            null = "per user /per workspace" (under our .vs folder)
            Empty = "workspace root".
            </param>
            <returns>writer</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.Settings.IWorkspaceSettingsPersistance.Commit">
            <summary>
            notify that writing was successful for this scope. Needed if autoCommit was false, otherwise closing the scope will cause entire write transation
            to be canceled. Used by features that needs to write multple related properties when a partial persistance may cause inconsistent results.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.Settings.IWorkspaceSettingsPersistance.Abort">
            <summary>
            Abort setting writing transaction. The settings files will not be updated on disk
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.Settings.IWorkspaceSettingsProvider">
            <summary>
            Dynamic settings providers
            These providers contribute properties to the hierarchical settings collection that comes from a different sources than on disk json files.
            Example can be "intristic in memory providers" or "converters" (components that parse other tools formats into AnyCode settings schema).
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.Settings.IWorkspaceSettingsProvider.OnWorkspaceSettingsChanged">
            <summary>
            Event fire when a settings source managed by the particular provider changes.
            The Settings manager will monitor this events and will propagate them to consumers as required.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.Settings.IWorkspaceSettingsProvider.GetSingleSettingsAsync(System.String,System.String)">
            <summary>
            Provide a workspace schema settings collection to be merged with the rest of AnyCode sources.
            Note provider should only provide a single source that applies only to the "scopePath".
            </summary>
            <param name="type">settings type (coresponding to the independent settings file name) Use SettingsTypes class constants</param>
            <param name="scopePath">location under workspace we reqire the settings for. </param>
            <returns>settings reader</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.Settings.IWorkspaceSettingsProvider.DisposeAsync">
            <summary>
            caled when workspace is disposed. The provider should disconnect listeners to other IWorkspace related components here, release resource and such.
            The potentially cached IWorkspace is awaialbe to be used, but some functionality may not work (for example it is likely attempting to use SymbolsService will fail)
            </summary>
            <returns>async task</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.Settings.IWorkspaceSettingsProviderFactory">
             <summary>
             Dynamic settings providers
             These providers contribute properties to the hierarchical settings collection that comes from a different sources than on disk json files.
             Example can be "intristic in memory providers" or "converters" (components that parse other tools formats into our settings schema).
            
             The factory interface is
             </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.Settings.IWorkspaceSettingsProviderFactory.Priority">
            <summary>
            the priority property is used to order the provider settings among other potential providers that can apply for the exact same location.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.Settings.IWorkspaceSettingsProviderFactory.CreateSettingsProvider(Microsoft.VisualStudio.Workspace.IWorkspace)">
            <summary>
            Create provider object for the given workspace instance
            </summary>
            <param name="workspace">workspace that will query for the settings</param>
            <returns>settings reader</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.Settings.IWorkspaceSettingsSourceWriter">
            <summary>
            Workspace Settings source writer inteface.
            Used for "automated" settings persistance driven by features.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.Settings.IWorkspaceSettingsSourceWriter.SetProperty``1(System.String,``0)">
            <summary>
            Persist a value in worspace setings.
            </summary>
            <typeparam name="T">>type of the value</typeparam>
            <param name="key">the name of this entry</param>
            <param name="value">the value to persist</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.Settings.IWorkspaceSettingsSourceWriter.Delete(System.String)">
            <summary>
            delete a particular setting (regardles of type - can be property, propertycollection or array )
            </summary>
            <param name="key">the propery name</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.Settings.IWorkspaceSettingsSourceWriter.CreateNew">
            <summary>
            Create a new inner scope workspace (to be used later for SetProperty[Array](key, IWorkspaceSettingsSource...);
            </summary>
            <returns>a compatable IWorkspaceSettingsSource implementation</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.Settings.WorkspaceSettingsChangedEventArgs">
            <summary>
            Settings change events data.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.Settings.WorkspaceSettingsChangedEventArgs.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Workspace.Settings.WorkspaceSettingsChangedEventArgs"/> class.
            </summary>
            <param name="type">settings type</param>
            <param name="scopePath">settings scope</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.Settings.WorkspaceSettingsChangedEventArgs.Type">
            <summary>
            Settins tupe (aka generic launch)
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.Settings.WorkspaceSettingsChangedEventArgs.ScopePath">
            <summary>
            The relative path to location under workspace folders, that is affected by the particular change.
            This is related to the Settings scope  used to aquire the settings from Settings manager such that
            any such location uder The value presented here should be considered invalidated.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.Settings.SettingsTypes">
            <summary>
            standard settings types
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.Settings.SettingsTypes.Debugging">
            <summary>
            Launch.json  we use that for setings specificaly related to F5 experience
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.Settings.SettingsTypes.Generic">
            <summary>
            Generic Workspace settings.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.Settings.WorkspaceSettingsExtensions">
            <summary>
            Conviniece extension for IWorkspaceSettings interface
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.Settings.WorkspaceSettingsExtensions.Property``1(Microsoft.VisualStudio.Workspace.Settings.IWorkspaceSettingsSource,System.String,``0)">
            <summary>
            Wrapper around WorkspaceSettingsResult GetProperty.
            Used when caller is not interested by the current state, but just want to get the current value to use.
            </summary>
            <typeparam name="T">type of the value</typeparam>
            <param name="settings">the settings instance</param>
            <param name="key">the name of the property</param>
            <param name="defaultValue">optional default value to use if the current value is not present or corrupted</param>
            <returns>the current value as persisted in the settings or default</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.Settings.WorkspaceSettingsExtensions.TryGetRootedValue(Microsoft.VisualStudio.Workspace.Settings.IWorkspaceSettings,System.String,System.String@,System.String@)">
            <summary>
            Get a string value with implied root
            </summary>
            <param name="settings">the settings instance</param>
            <param name="key">the name of the property</param>
            <param name="value">the string value</param>
            <param name="root">the implied root</param>
            <returns>true if exist</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.Settings.WorkspaceSettingsExtensions.AbsolutePath(Microsoft.VisualStudio.Workspace.Settings.IWorkspaceSettings,System.String,System.String)">
            <summary>
            Get a string value representing potentially relative path as full path, using implied root as a base
            </summary>
            <param name="settings">the settings instance</param>
            <param name="key">the name of the property</param>
            <param name="defaultValue">default value</param>
            <returns>the absolute path</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.Settings.WorkspaceSettingsExtensions.PropertyArray``1(Microsoft.VisualStudio.Workspace.Settings.IWorkspaceSettingsSource,System.String)">
            <summary>
            Wrapper around WorkspaceSettingsResult GetPropertyArray.
            Used when caller is not interested by the current state, but just want to get the current value to use.
            </summary>
            <typeparam name="T">type of the elements in array</typeparam>
            <param name="settings">the settings instance</param>
            <param name="key">the name of the property</param>
            <returns>the current value as persisted in the settings or empty array if there is none</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.Settings.WorkspaceSettingsExtensions.UnionPropertyArray``1(Microsoft.VisualStudio.Workspace.Settings.IWorkspaceSettings,System.String)">
            <summary>
            This method will return union of all values in heirarchical chain, not just the top array.
            </summary>
            <typeparam name="T">type of the elements in array</typeparam>
            <param name="settings">the settings instance</param>
            <param name="key">the name of the property</param>
            <returns>the current value as persisted in the settings or empty array if there is none</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.Settings.WorkspaceSettingsExtensions.PropertyGroup(Microsoft.VisualStudio.Workspace.Settings.IWorkspaceSettings,System.String)">
            <summary>
            A special accessor for inner named settings collection (T=IWorkspaceSettings)
            Used when caller is not interested by the current state, but just want to get the current value to use.
            </summary>
            <param name="settings">the settings instance</param>
            <param name="key">the name of the property</param>
            <returns>the current value as persisted in the settings or empty</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.Settings.WorkspaceSettingsExtensions.EnsurePropertyGroup(Microsoft.VisualStudio.Workspace.Settings.IWorkspaceSettingsSourceWriter,System.String)">
            <summary>
            A variant of "Scope", used during "Save" it will create and add a colleciton property with "key" name if it does not already exists.
            Used when caller is not interested by the current state, but just want to get the current value to use.
            </summary>
            <param name="settings">the settings instance</param>
            <param name="key">the name of the property</param>
            <returns>the current value as persisted in the settings or empty</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.Settings.WorkspaceSettingsExtensions.PropertyGroupArray(Microsoft.VisualStudio.Workspace.Settings.IWorkspaceSettings,System.String)">
            <summary>
            A special accessor for inner named settings collection arya (T=IWorkspaceSettings)
            Used when caller is not interested by the current state, but just want to get the current value to use.
            </summary>
            <param name="settings">the settings instance</param>
            <param name="key">the name of the property</param>
            <returns>the current value as persisted in the settings or empty aray</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.Strings">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.Strings.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.Strings.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.Strings.CollectionCannotBeEmpty">
            <summary>
              Looks up a localized string similar to Collection must not be empty..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.Strings.MembersNotInitialized">
            <summary>
              Looks up a localized string similar to All members must be initialized..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.Strings.StringCannotBeEmpty">
            <summary>
              Looks up a localized string similar to Value must not be the empty string..
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.IWorkspaceServiceFactory">
            <summary>
            Workspace service factory
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.IWorkspaceServiceFactory.CreateService(Microsoft.VisualStudio.Workspace.IWorkspace)">
            <summary>
            Create an instance of a service in the context of a IWorkspace
            </summary>
            <param name="workspaceContext">The workspace context instance</param>
            <returns>A Service representing </returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.WorkspaceServiceHelper">
            <summary>
            IWorkspace service helpers
            Contains method to access IWorkspace based services
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.WorkspaceServiceHelper.GetService``1(Microsoft.VisualStudio.Workspace.IWorkspace,System.Boolean)">
            <summary>
            Get a service type from a workspace
            </summary>
            <typeparam name="T">Type of the service to ask for</typeparam>
            <param name="workspace">The workspace context</param>
            <param name="throwIfNotFound">Throw exception if service not found</param>
            <returns>The workpace service or null if not found </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.WorkspaceServiceHelper.GetFindFilesService(Microsoft.VisualStudio.Workspace.IWorkspace)">
            <summary>
            Get the IFindFilesService service for a workspace
            </summary>
            <param name="workspace">workspace instance</param>
            <returns>The instance of the IFindFilesService</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.WorkspaceServiceHelper.GetFileWatcherService(Microsoft.VisualStudio.Workspace.IWorkspace)">
            <summary>
            Get the IFileSystemChanged service for a workspace
            </summary>
            <param name="workspace">workspace instance</param>
            <returns>The instance of the IFileSystemChanged</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.WorkspaceServiceHelper.GetSettingsManager(Microsoft.VisualStudio.Workspace.IWorkspace)">
            <summary>
            Get the IWorkspaceSettingsManager service for a workspace
            </summary>
            <param name="workspace">workspace instance</param>
            <returns>The instance of the IWorkspaceSettingsManager</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.WorkspaceServiceHelper.GetIndexWorkspaceService(Microsoft.VisualStudio.Workspace.IWorkspace)">
            <summary>
            Get the IFileScannerService for a workspace instance
            </summary>
            <param name="workspace">workspace instance</param>
            <returns>The instance of the IFileScannerService or null if not found</returns>
        </member>
    </members>
</doc>
